#[install]
#prefix=/opt

[build]

# note: I don't know (yet) how to tell the setup system that I wish
# to use these custom settings, so for the time being you will
# have to provide these settings the first time you create
# an instance of the BUFRInterfaceECMWF() class defined in
# the file pybufr_ecmwf/pybufr_ecmwf.py
# See the lines following 'if __name__ == "__main__":'
# in this file for examples.
# if you just go for the defaults, these are gfortran and
# gcc at the moment.

# use this to tell which compiler to use
# (in case multiple c or fortran compilers are installed on your system)
# allowed values are:
# for fortran: g95, gfortran, g77, f90, f77
# for c: gcc, cc
preferred_fortran_compiler='gfortran'
preferred_c_compiler='gcc'

# You could use this to use a gfortran compiler installed in
# a non-standard place. This overrides the preferred setting given above.
# The ld_library_path setting is needed to let the fortran compiler
# run properly without having its libraries in the search path.
# The flags should be setup to allow the fortran code to link with c-code
# (hence the no-second-underscore) and should instruct the compiler
# to generate a shared object file (i.e. PIC)
#fortran_compiler="/home/jos/bin/gfortran_personal"
#fortran_ld_library_path="/home/jos/bin/gcc-trunk/lib64"
#fortran_flags="-fno-second-underscore -fPIC"

# Alternatively you could use this to use a g95 compiler installed in
# a non-standard place
#fortran_compiler="/home/jos/bin/g95_32"
#fortran_flags="-fno-second-underscore -fPIC -i4 -r8")

# The c-compiler could be specified manually as well, in case you need it
# (but since I have no alternatives installed for testing I have no
#  examples to give you at the moment)
#c_compiler=""
#c_ld_library_path=""
#c_flags=""


[bdist_rpm]

# options used when constructing a binary rpm package for this module
release = 1
packager = Jos de Kloe <josdekloe@gmail.com>
doc_files = CHANGES.txt
            README.txt
            USAGE.txt
            pybufr_ecmwf/example_programs/
